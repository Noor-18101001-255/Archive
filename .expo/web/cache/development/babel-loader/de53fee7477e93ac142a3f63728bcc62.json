{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Picker from \"react-native-web/dist/exports/Picker\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar Dropdown = function (_Component) {\n  _inherits(Dropdown, _Component);\n\n  var _super = _createSuper(Dropdown);\n\n  function Dropdown() {\n    var _this;\n\n    _classCallCheck(this, Dropdown);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      selectedcat: \"\",\n      category: [{\n        itemName: \"Samsung M20\"\n      }, {\n        itemName: \"Nokia\"\n      }, {\n        itemName: \"Apple\"\n      }, {\n        itemName: \"Samsung M23\"\n      }, {\n        itemName: \"Samsung M24\"\n      }, {\n        itemName: \"Samsung M25\"\n      }]\n    };\n    return _this;\n  }\n\n  _createClass(Dropdown, [{\n    key: \"onValueChangeCat\",\n    value: function onValueChangeCat(value) {\n      return _regeneratorRuntime.async(function onValueChangeCat$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              this.setState({\n                selectedcat: value\n              });\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _jsx(View, {\n        style: [props.style, styles.viewStyle],\n        children: _jsx(View, {\n          style: {\n            flex: 1,\n            fontSize: 14\n          },\n          children: _jsx(Picker, {\n            itemStyle: styles.itemStyle,\n            mode: \"dropdown\",\n            style: styles.pickerStyle,\n            selectedValue: this.state.selectedcat,\n            onValueChange: this.onValueChangeCat.bind(this),\n            children: this.state.category.map(function (item, index) {\n              return _jsx(Picker.Item, {\n                color: \"#0087F0\",\n                label: item.itemName,\n                value: item.itemName,\n                index: index\n              });\n            })\n          })\n        })\n      });\n    }\n  }]);\n\n  return Dropdown;\n}(Component);\n\nexport { Dropdown as default };\nvar styles = StyleSheet.create({\n  viewStyle: {\n    flex: 1,\n    alignSelf: \"center\",\n    flexDirection: \"row\",\n    width: \"92%\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\"\n  },\n  itemStyle: {\n    fontSize: 10,\n    fontFamily: \"Roboto-Regular\",\n    color: \"#007aff\"\n  },\n  pickerStyle: {\n    width: \"100%\",\n    height: 40,\n    color: \"#007aff\",\n    fontSize: 14,\n    fontFamily: \"Roboto-Regular\"\n  },\n  textStyle: {\n    fontSize: 14,\n    fontFamily: \"Roboto-Regular\"\n  }\n});","map":{"version":3,"sources":["D:/FYP/FYPNativeStuff/App/Archive/Components/Dropdown.js"],"names":["React","Component","Dropdown","state","selectedcat","category","itemName","value","setState","props","style","styles","viewStyle","flex","fontSize","itemStyle","pickerStyle","onValueChangeCat","bind","map","item","index","StyleSheet","create","alignSelf","flexDirection","width","justifyContent","alignItems","fontFamily","color","height","textStyle"],"mappings":";;;;;;;;;;;AAuGA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;;;IAGqBC,Q;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACNC,MAAAA,WAAW,EAAE,EADP;AAENC,MAAAA,QAAQ,EAAE,CACR;AACEC,QAAAA,QAAQ,EAAE;AADZ,OADQ,EAIR;AACEA,QAAAA,QAAQ,EAAE;AADZ,OAJQ,EAOR;AACEA,QAAAA,QAAQ,EAAE;AADZ,OAPQ,EAUR;AACEA,QAAAA,QAAQ,EAAE;AADZ,OAVQ,EAaR;AACEA,QAAAA,QAAQ,EAAE;AADZ,OAbQ,EAgBR;AACEA,QAAAA,QAAQ,EAAE;AADZ,OAhBQ;AAFJ,K;;;;;;WAwBR,0BAAuBC,KAAvB;AAAA;AAAA;AAAA;AAAA;AACE,mBAAKC,QAAL,CAAc;AAAEJ,gBAAAA,WAAW,EAAEG;AAAf,eAAd;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAIA,kBAAS;AACP,aACE,KAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACE,KAAK,CAACC,KAAP,EAAaC,MAAM,CAACC,SAApB,CAAb;AAAA,kBACE,KAAC,IAAD;AAAM,UAAA,KAAK,EAAE;AAAEC,YAAAA,IAAI,EAAE,CAAR;AAAWC,YAAAA,QAAQ,EAAE;AAArB,WAAb;AAAA,oBACE,KAAC,MAAD;AACE,YAAA,SAAS,EAAEH,MAAM,CAACI,SADpB;AAEE,YAAA,IAAI,EAAC,UAFP;AAGE,YAAA,KAAK,EAAEJ,MAAM,CAACK,WAHhB;AAIE,YAAA,aAAa,EAAE,KAAKb,KAAL,CAAWC,WAJ5B;AAKE,YAAA,aAAa,EAAE,KAAKa,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CALjB;AAAA,sBAOG,KAAKf,KAAL,CAAWE,QAAX,CAAoBc,GAApB,CAAwB,UAACC,IAAD,EAAOC,KAAP;AAAA,qBACvB,KAAC,MAAD,CAAQ,IAAR;AACE,gBAAA,KAAK,EAAC,SADR;AAEE,gBAAA,KAAK,EAAED,IAAI,CAACd,QAFd;AAGE,gBAAA,KAAK,EAAEc,IAAI,CAACd,QAHd;AAIE,gBAAA,KAAK,EAAEe;AAJT,gBADuB;AAAA,aAAxB;AAPH;AADF;AADF,QADF;AAsBD;;;;EApDmCpB,S;;SAAjBC,Q;AAuDrB,IAAMS,MAAM,GAAGW,UAAU,CAACC,MAAX,CAAkB;AAC/BX,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETW,IAAAA,SAAS,EAAE,QAFF;AAGTC,IAAAA,aAAa,EAAE,KAHN;AAITC,IAAAA,KAAK,EAAE,KAJE;AAKTC,IAAAA,cAAc,EAAE,eALP;AAMTC,IAAAA,UAAU,EAAE;AANH,GADoB;AAS/Bb,EAAAA,SAAS,EAAE;AACTD,IAAAA,QAAQ,EAAE,EADD;AAETe,IAAAA,UAAU,EAAE,gBAFH;AAGTC,IAAAA,KAAK,EAAE;AAHE,GAToB;AAc/Bd,EAAAA,WAAW,EAAE;AACXU,IAAAA,KAAK,EAAE,MADI;AAEXK,IAAAA,MAAM,EAAE,EAFG;AAGXD,IAAAA,KAAK,EAAE,SAHI;AAIXhB,IAAAA,QAAQ,EAAE,EAJC;AAKXe,IAAAA,UAAU,EAAE;AALD,GAdkB;AAqB/BG,EAAAA,SAAS,EAAE;AACTlB,IAAAA,QAAQ,EAAE,EADD;AAETe,IAAAA,UAAU,EAAE;AAFH;AArBoB,CAAlB,CAAf","sourcesContent":["// import React, { FC, useState,useCallback } from 'react';\r\n// import { StyleSheet, View, Text, TouchableOpacity, FlatList } from 'react-native';\r\n// import { Icon } from 'react-native-elements';\r\n\r\n\r\n// const Dropdown = (props) => {\r\n//   const [visible, setVisible] = useState(false);\r\n//   const [selItem, setItem] = useState(props.label);\r\n  \r\n   \r\n\r\n//   const toggleDropdown = () => {\r\n//     setVisible(!visible);\r\n//   };\r\n//   const renderItem = ({ item }) => (\r\n//     <TouchableOpacity\r\n//       onPress={() => {console.log(item)}}\r\n//       style={styles.dropdown}\r\n//     >\r\n//       <Text style={styles.dropdownText}>\r\n//         {item}\r\n//       </Text>\r\n//     </TouchableOpacity>\r\n\r\n//   );\r\n//   const renderDropdown = () => {\r\n//     if (visible) {\r\n//       return (\r\n//         <FlatList\r\n//           data={props.data}\r\n//           keyExtractor={(item, index) => index}\r\n//           renderItem={renderItem}\r\n//         />\r\n\r\n//       );\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <TouchableOpacity\r\n//       style={[props.style, styles.button]}\r\n//       onPress={toggleDropdown}\r\n//     >\r\n//       {renderDropdown()}\r\n//       <Text style={styles.buttonText}>{selItem}</Text>\r\n//       <Icon type='font-awesome' name='chevron-down' />\r\n//     </TouchableOpacity>\r\n//   );\r\n// }\r\n\r\n// const styles = StyleSheet.create({\r\n//   button: {\r\n//     width: '100%',\r\n//     height: 50,\r\n//     flexDirection: 'row',\r\n//     alignItems: 'center',\r\n//     // backgroundColor: '#efefef',\r\n//     height: 50,\r\n//     width: '90%',\r\n//     paddingHorizontal: 10,\r\n//     zIndex: 1,\r\n//     alignSelf: 'center',\r\n\r\n//   },\r\n//   buttonText: {\r\n//     flex: 1,\r\n//     textAlign: 'center',\r\n//     fontSize: 16,\r\n//     fontWeight: 'bold',\r\n//     color: '#808e9b',\r\n\r\n//   },\r\n//   dropdown: {\r\n//     // flex:1,\r\n    \r\n//     height: 50,\r\n//     top: 50,\r\n//     backgroundColor: '#333',\r\n//     zIndex: 2,\r\n//     borderWidth:1,\r\n//     borderColor:'#fff',\r\n//     // width: '60%',\r\n//     // marginVertical: '20%',\r\n//     // paddingHorizontal: 10\r\n\r\n\r\n//   },\r\n//   dropdownText: {\r\n//     flex: 1,\r\n//     textAlign: 'center',\r\n//     fontSize: 16,\r\n//     fontWeight: 'bold',\r\n//     color: '#808e9b',\r\n//   },\r\n\r\n// });\r\n\r\n// export default Dropdown;\r\n\r\n// ===========================================================================\r\n\r\n\r\n\r\nimport React, { Component } from \"react\";\r\nimport { Picker, View, Text, StyleSheet } from \"react-native\";\r\n\r\nexport default class Dropdown extends Component {\r\n  state = {\r\n    selectedcat: \"\",\r\n    category: [\r\n      {\r\n        itemName: \"Samsung M20\"\r\n      },\r\n      {\r\n        itemName: \"Nokia\"\r\n      },\r\n      {\r\n        itemName: \"Apple\"\r\n      },\r\n      {\r\n        itemName: \"Samsung M23\"\r\n      },\r\n      {\r\n        itemName: \"Samsung M24\"\r\n      },\r\n      {\r\n        itemName: \"Samsung M25\"\r\n      }\r\n    ]\r\n  };\r\n\r\n  async onValueChangeCat(value) {\r\n    this.setState({ selectedcat: value });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <View style={[props.style,styles.viewStyle]}>\r\n        <View style={{ flex: 1, fontSize: 14 }}>\r\n          <Picker\r\n            itemStyle={styles.itemStyle}\r\n            mode=\"dropdown\"\r\n            style={styles.pickerStyle}\r\n            selectedValue={this.state.selectedcat}\r\n            onValueChange={this.onValueChangeCat.bind(this)}\r\n          >\r\n            {this.state.category.map((item, index) => (\r\n              <Picker.Item\r\n                color=\"#0087F0\"\r\n                label={item.itemName}\r\n                value={item.itemName}\r\n                index={index}\r\n              />\r\n            ))}\r\n          </Picker>\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  viewStyle: {\r\n    flex: 1,\r\n    alignSelf: \"center\",\r\n    flexDirection: \"row\",\r\n    width: \"92%\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\"\r\n  },\r\n  itemStyle: {\r\n    fontSize: 10,\r\n    fontFamily: \"Roboto-Regular\",\r\n    color: \"#007aff\"\r\n  },\r\n  pickerStyle: {\r\n    width: \"100%\",\r\n    height: 40,\r\n    color: \"#007aff\",\r\n    fontSize: 14,\r\n    fontFamily: \"Roboto-Regular\"\r\n  },\r\n  textStyle: {\r\n    fontSize: 14,\r\n    fontFamily: \"Roboto-Regular\"\r\n  }\r\n});"]},"metadata":{},"sourceType":"module"}