{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, createRef } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport LayoutAnimation from \"react-native-web/dist/exports/LayoutAnimation\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Indicator from \"./Indicator\";\nimport ChildItem from \"./ChildItem\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar FlatListSlider = function (_Component) {\n  _inherits(FlatListSlider, _Component);\n\n  var _super = _createSuper(FlatListSlider);\n\n  function FlatListSlider(props) {\n    var _this;\n\n    _classCallCheck(this, FlatListSlider);\n\n    _this = _super.call(this, props);\n    _this.slider = createRef();\n\n    _this.onViewableItemsChanged = function (_ref) {\n      var viewableItems = _ref.viewableItems,\n          changed = _ref.changed;\n\n      if (viewableItems.length > 0) {\n        var currentIndex = viewableItems[0].index;\n\n        if (currentIndex % _this.props.data.length === _this.props.data.length - 1 && _this.props.loop) {\n          _this.setState({\n            index: currentIndex,\n            data: [].concat(_toConsumableArray(_this.state.data), _toConsumableArray(_this.props.data))\n          });\n        } else {\n          _this.setState({\n            index: currentIndex % _this.props.data.length\n          });\n        }\n\n        if (_this.props.currentIndexCallback) {\n          _this.props.currentIndexCallback(currentIndex);\n        }\n      }\n    };\n\n    _this.viewabilityConfig = {\n      viewAreaCoveragePercentThreshold: 50\n    };\n\n    _this.incrementSliderListIndex = function () {\n      if (_this.state.index < _this.props.data.length - 2) {\n        console.log(_this.state.index);\n        console.log(_this.state.index);\n        var newIndex = _this.state.index + 1;\n\n        if (_this.props.animation) {\n          LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);\n        }\n\n        _this.setState({\n          index: newIndex\n        });\n\n        _this.slider.current.scrollToIndex({\n          index: newIndex % _this.props.data.length,\n          animated: true\n        });\n      }\n    };\n\n    _this.decrementSliderListIndex = function () {\n      if (_this.state.index > 0) {\n        var newIndex = _this.state.index - 1;\n\n        if (_this.props.animation) {\n          LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);\n        }\n\n        _this.setState({\n          index: newIndex\n        });\n\n        _this.slider.current.scrollToIndex({\n          index: newIndex % _this.props.data.length,\n          animated: true\n        });\n      }\n    };\n\n    _this.startAutoPlay = function () {\n      _this.sliderTimer = setInterval(_this.incrementSliderListIndex, _this.props.timer);\n    };\n\n    _this.stopAutoPlay = function () {\n      if (_this.sliderTimer) {\n        clearInterval(_this.sliderTimer);\n        _this.sliderTimer = null;\n      }\n    };\n\n    _this.state = {\n      index: _this.props.initialScrollIndex,\n      data: _this.props.data\n    };\n\n    if (Platform.OS === 'android') {\n      UIManager.setLayoutAnimationEnabledExperimental(true);\n    }\n\n    return _this;\n  }\n\n  _createClass(FlatListSlider, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.onRef) {\n        this.props.onRef(this);\n      }\n\n      if (this.props.autoscroll) {\n        this.startAutoPlay();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.props.onRef) {\n        this.props.onRef(undefined);\n      }\n\n      if (this.props.autoscroll) {\n        this.stopAutoPlay();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var itemWidth = this.props.width;\n      var separatorWidth = this.props.separatorWidth;\n      var totalItemWidth = itemWidth + separatorWidth;\n      return _jsxs(View, {\n        children: [_jsx(FlatList, {\n          ref: this.slider,\n          windowSize: 3,\n          initialNumToRender: 5,\n          maxToRenderPerBatch: 5,\n          removeClippedSubviews: this.props.removeClippedSubviews,\n          horizontal: true,\n          pagingEnabled: true,\n          snapToInterval: totalItemWidth,\n          decelerationRate: \"fast\",\n          bounces: false,\n          contentContainerStyle: this.props.contentContainerStyle,\n          showsHorizontalScrollIndicator: false,\n          renderItem: function renderItem(_ref2) {\n            var item = _ref2.item,\n                index = _ref2.index;\n            return React.cloneElement(_this2.props.component, {\n              style: {\n                width: _this2.props.width\n              },\n              item: item,\n              imageKey: _this2.props.imageKey,\n              onPress: _this2.props.onPress,\n              index: _this2.state.index % _this2.props.data.length,\n              active: index === _this2.state.index,\n              local: _this2.props.local,\n              height: _this2.props.height\n            });\n          },\n          ItemSeparatorComponent: function ItemSeparatorComponent() {\n            return _jsx(View, {\n              style: {\n                width: _this2.props.separatorWidth\n              }\n            });\n          },\n          keyExtractor: function keyExtractor(item, index) {\n            return item.toString() + index;\n          },\n          onViewableItemsChanged: this.onViewableItemsChanged,\n          viewabilityConfig: this.viewabilityConfig,\n          getItemLayout: function getItemLayout(data, index) {\n            return {\n              length: totalItemWidth,\n              offset: totalItemWidth * index,\n              index: index\n            };\n          },\n          data: this.state.data\n        }), this.props.indicator && _jsx(Indicator, {\n          itemCount: this.props.data.length,\n          currentIndex: this.state.index % this.props.data.length,\n          indicatorStyle: this.props.indicatorStyle,\n          indicatorContainerStyle: [styles.indicatorContainerStyle, this.props.indicatorContainerStyle],\n          indicatorActiveColor: this.props.indicatorActiveColor,\n          indicatorInActiveColor: this.props.indicatorInActiveColor,\n          indicatorActiveWidth: this.props.indicatorActiveWidth,\n          style: _objectSpread(_objectSpread({}, styles.indicator), this.props.indicatorStyle)\n        })]\n      });\n    }\n  }]);\n\n  return FlatListSlider;\n}(Component);\n\nFlatListSlider.defaultProps = {\n  data: [],\n  initialScrollIndex: 0,\n  imageKey: 'image',\n  local: false,\n  width: Math.round(Dimensions.get('window').width),\n  height: 300,\n  separatorWidth: 0,\n  loop: true,\n  indicator: true,\n  indicatorStyle: {},\n  indicatorContainerStyle: {},\n  indicatorActiveColor: '#3498db',\n  indicatorInActiveColor: '#bdc3c7',\n  indicatorActiveWidth: 6,\n  animation: true,\n  autoscroll: true,\n  timer: 3000,\n  onPress: {},\n  contentContainerStyle: {},\n  component: _jsx(ChildItem, {}),\n  removeClippedSubviews: true\n};\nexport { FlatListSlider as default };\nvar styles = StyleSheet.create({\n  image: {\n    height: 300,\n    resizeMode: 'cover'\n  },\n  indicatorContainerStyle: {\n    marginTop: 18\n  },\n  shadow: _objectSpread({}, Platform.select({\n    ios: {\n      shadowColor: 'black',\n      shadowOffset: {\n        width: 3,\n        height: 3\n      },\n      shadowOpacity: 0.4,\n      shadowRadius: 10\n    },\n    android: {\n      elevation: 5\n    }\n  }))\n});","map":{"version":3,"sources":["D:/FYP/FYPNativeStuff/App/Archive/node_modules/react-native-flatlist-slider/src/FlatListSlider.js"],"names":["React","Component","createRef","Indicator","ChildItem","FlatListSlider","props","slider","onViewableItemsChanged","viewableItems","changed","length","currentIndex","index","data","loop","setState","state","currentIndexCallback","viewabilityConfig","viewAreaCoveragePercentThreshold","incrementSliderListIndex","console","log","newIndex","animation","LayoutAnimation","configureNext","Presets","easeInEaseOut","current","scrollToIndex","animated","decrementSliderListIndex","startAutoPlay","sliderTimer","setInterval","timer","stopAutoPlay","clearInterval","initialScrollIndex","Platform","OS","UIManager","setLayoutAnimationEnabledExperimental","onRef","autoscroll","undefined","itemWidth","width","separatorWidth","totalItemWidth","removeClippedSubviews","contentContainerStyle","item","cloneElement","component","style","imageKey","onPress","active","local","height","toString","offset","indicator","indicatorStyle","styles","indicatorContainerStyle","indicatorActiveColor","indicatorInActiveColor","indicatorActiveWidth","defaultProps","Math","round","Dimensions","get","StyleSheet","create","image","resizeMode","marginTop","shadow","select","ios","shadowColor","shadowOffset","shadowOpacity","shadowRadius","android","elevation"],"mappings":"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","sourcesContent":["import React, { Component, createRef } from 'react';\nimport {\n  FlatList,\n  View,\n  StyleSheet,\n  LayoutAnimation,\n  Platform,\n  UIManager,\n  Dimensions,\n} from 'react-native';\nimport Indicator from './Indicator';\nimport ChildItem from './ChildItem';\n\nexport default class FlatListSlider extends Component {\n  slider = createRef();\n\n  static defaultProps = {\n    data: [],\n    initialScrollIndex: 0,\n    imageKey: 'image',\n    local: false,\n    width: Math.round(Dimensions.get('window').width),\n    height: 300,\n    separatorWidth: 0,\n    loop: true,\n    indicator: true,\n    indicatorStyle: {},\n    indicatorContainerStyle: {},\n    indicatorActiveColor: '#3498db',\n    indicatorInActiveColor: '#bdc3c7',\n    indicatorActiveWidth: 6,\n    animation: true,\n    autoscroll: true,\n    timer: 3000,\n    onPress: {},\n    contentContainerStyle: {},\n    component: <ChildItem />,\n    removeClippedSubviews: true,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      index: this.props.initialScrollIndex,\n      data: this.props.data,\n    };\n    if (Platform.OS === 'android') {\n      UIManager.setLayoutAnimationEnabledExperimental(true);\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.onRef) {\n      this.props.onRef(this)\n    }\n    if (this.props.autoscroll) {\n      this.startAutoPlay();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.props.onRef) {\n      this.props.onRef(undefined)\n    }\n\n    if (this.props.autoscroll) {\n      this.stopAutoPlay();\n    }\n  }\n\n  render() {\n    const itemWidth = this.props.width;\n    const separatorWidth = this.props.separatorWidth;\n    const totalItemWidth = itemWidth + separatorWidth;\n\n    return (\n      <View>\n        <FlatList\n          ref={this.slider}\n          windowSize={3}\n          initialNumToRender={5}\n          maxToRenderPerBatch={5}\n          removeClippedSubviews={this.props.removeClippedSubviews}\n          horizontal\n          pagingEnabled={true}\n          snapToInterval={totalItemWidth}\n          decelerationRate=\"fast\"\n          bounces={false}\n          contentContainerStyle={this.props.contentContainerStyle}\n          showsHorizontalScrollIndicator={false}\n          renderItem={({ item, index }) =>\n            React.cloneElement(this.props.component, {\n              style: { width: this.props.width },\n              item: item,\n              imageKey: this.props.imageKey,\n              onPress: this.props.onPress,\n              index: this.state.index % this.props.data.length,\n              active: index === this.state.index,\n              local: this.props.local,\n              height: this.props.height,\n            })\n          }\n          ItemSeparatorComponent={() => (\n            <View style={{ width: this.props.separatorWidth }} />\n          )}\n          keyExtractor={(item, index) => item.toString() + index}\n          onViewableItemsChanged={this.onViewableItemsChanged}\n          viewabilityConfig={this.viewabilityConfig}\n          getItemLayout={(data, index) => ({\n            length: totalItemWidth,\n            offset: totalItemWidth * index,\n            index,\n          })}\n          data={this.state.data}\n        />\n        {this.props.indicator && (\n          <Indicator\n            itemCount={this.props.data.length}\n            currentIndex={this.state.index % this.props.data.length}\n            indicatorStyle={this.props.indicatorStyle}\n            indicatorContainerStyle={[\n              styles.indicatorContainerStyle,\n              this.props.indicatorContainerStyle,\n            ]}\n            indicatorActiveColor={this.props.indicatorActiveColor}\n            indicatorInActiveColor={this.props.indicatorInActiveColor}\n            indicatorActiveWidth={this.props.indicatorActiveWidth}\n            style={{ ...styles.indicator, ...this.props.indicatorStyle }}\n          />\n        )}\n      </View>\n    );\n  };\n\n  onViewableItemsChanged = ({ viewableItems, changed }) => {\n    if (viewableItems.length > 0) {\n      let currentIndex = viewableItems[0].index;\n      if (\n        currentIndex % this.props.data.length === this.props.data.length - 1 &&\n        this.props.loop\n      ) {\n        this.setState({\n          index: currentIndex,\n          data: [...this.state.data, ...this.props.data],\n        });\n      } else {\n        this.setState({ index: currentIndex % this.props.data.length });\n        // this.setState({index: 0});\n      }\n\n      if (this.props.currentIndexCallback) {\n        this.props.currentIndexCallback(currentIndex);\n      }\n    }\n  };\n\n  viewabilityConfig = {\n    viewAreaCoveragePercentThreshold: 50,\n  };\n\n  incrementSliderListIndex = () => {\n    if (this.state.index < this.props.data.length-2) {\n      console.log(this.state.index)\n      console.log(this.state.index)\n      let newIndex = this.state.index + 1;\n      if (this.props.animation) {\n        LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);\n      }\n      this.setState({ index: newIndex });\n      this.slider.current.scrollToIndex({\n        index: newIndex % this.props.data.length,\n        animated: true,\n      });\n    }\n  };\n\n  decrementSliderListIndex = () => {\n    if (this.state.index > 0) {\n      let newIndex = this.state.index - 1;\n      if (this.props.animation) {\n        LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);\n      }\n      this.setState({ index: newIndex });\n      this.slider.current.scrollToIndex({\n        index: newIndex % this.props.data.length,\n        animated: true,\n      });\n    }\n  };\n\n  startAutoPlay = () => {\n    this.sliderTimer = setInterval(\n      this.incrementSliderListIndex,\n      this.props.timer,\n    );\n  };\n\n  stopAutoPlay = () => {\n    if (this.sliderTimer) {\n      clearInterval(this.sliderTimer);\n      this.sliderTimer = null;\n    }\n  };\n}\n\nconst styles = StyleSheet.create({\n  image: {\n    height: 300,\n    resizeMode: 'cover',\n  },\n  indicatorContainerStyle: {\n    marginTop: 18,\n  },\n  shadow: {\n    ...Platform.select({\n      ios: {\n        shadowColor: 'black',\n        shadowOffset: { width: 3, height: 3 },\n        shadowOpacity: 0.4,\n        shadowRadius: 10,\n      },\n      android: {\n        elevation: 5,\n      },\n    }),\n  },\n});\n"]},"metadata":{},"sourceType":"module"}