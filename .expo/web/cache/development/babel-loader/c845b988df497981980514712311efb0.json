{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport Picker from \"react-native-web/dist/exports/Picker\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function Dropdown(props) {\n  var _useState = useState(props.label),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedcat = _useState2[0],\n      setSelectedcat = _useState2[1];\n\n  var _useState3 = useState([{\n    id: '',\n    name: props.label\n  }].concat(_toConsumableArray(props.data))),\n      _useState4 = _slicedToArray(_useState3, 2),\n      category = _useState4[0],\n      setcategory = _useState4[1];\n\n  var onValueChangeCat = function onValueChangeCat(value) {\n    setcategory(function (val) {\n      val.filter(function (x) {\n        return x.id != '';\n      });\n    });\n\n    if (value === '') {\n      console.log(\"null\");\n    } else {\n      props.onValueChange(value);\n    }\n  };\n\n  return _jsx(View, {\n    style: [props.style, styles.viewStyle],\n    children: _jsx(View, {\n      style: {\n        flex: 1,\n        fontSize: 14\n      },\n      children: _jsx(Picker, {\n        itemStyle: styles.itemStyle,\n        mode: \"dropdown\",\n        style: styles.pickerStyle,\n        selectedValue: selectedcat,\n        onValueChange: onValueChangeCat.bind(this),\n        children: category.map(function (item, index) {\n          return _jsx(Picker.Item, {\n            color: \"#808e9b\",\n            label: item.name,\n            value: item.id,\n            index: index + 1\n          }, index + 1);\n        })\n      })\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  viewStyle: {\n    alignSelf: \"center\",\n    flexDirection: \"row\",\n    width: \"92%\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\"\n  },\n  itemStyle: {\n    flex: 1,\n    fontSize: 10,\n    fontFamily: \"Roboto-Regular\",\n    color: \"#808e9b\",\n    backgroundColor: '#333'\n  },\n  pickerStyle: {\n    width: \"100%\",\n    height: 40,\n    color: \"#808e9b\",\n    fontSize: 16,\n    fontWeight: 'bold',\n    backgroundColor: '#333',\n    fontFamily: \"Roboto-Regular\"\n  },\n  textStyle: {\n    fontSize: 14,\n    fontFamily: \"Roboto-Regular\"\n  }\n});","map":{"version":3,"sources":["D:/FYP/FYPNativeStuff/App/Archive/Components/Dropdown.js"],"names":["React","useState","Dropdown","props","label","selectedcat","setSelectedcat","id","name","data","category","setcategory","onValueChangeCat","value","val","filter","x","console","log","onValueChange","style","styles","viewStyle","flex","fontSize","itemStyle","pickerStyle","bind","map","item","index","StyleSheet","create","alignSelf","flexDirection","width","justifyContent","alignItems","fontFamily","color","backgroundColor","height","fontWeight","textStyle"],"mappings":"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","sourcesContent":["// import React, { FC, useState,useCallback } from 'react';\r\n// import { StyleSheet, View, Text, TouchableOpacity, FlatList } from 'react-native';\r\n// import { Icon } from 'react-native-elements';\r\n\r\n\r\n// const Dropdown = (props) => {\r\n//   const [visible, setVisible] = useState(false);\r\n//   const [selItem, setItem] = useState(props.label);\r\n\r\n\r\n\r\n//   const toggleDropdown = () => {\r\n//     setVisible(!visible);\r\n//   };\r\n//   const renderItem = ({ item }) => (\r\n//     <TouchableOpacity\r\n//       onPress={() => {console.log(item)}}\r\n//       style={styles.dropdown}\r\n//     >\r\n//       <Text style={styles.dropdownText}>\r\n//         {item}\r\n//       </Text>\r\n//     </TouchableOpacity>\r\n\r\n//   );\r\n//   const renderDropdown = () => {\r\n//     if (visible) {\r\n//       return (\r\n//         <FlatList\r\n//           data={props.data}\r\n//           keyExtractor={(item, index) => index}\r\n//           renderItem={renderItem}\r\n//         />\r\n\r\n//       );\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <TouchableOpacity\r\n//       style={[props.style, styles.button]}\r\n//       onPress={toggleDropdown}\r\n//     >\r\n//       {renderDropdown()}\r\n//       <Text style={styles.buttonText}>{selItem}</Text>\r\n//       <Icon type='font-awesome' name='chevron-down' />\r\n//     </TouchableOpacity>\r\n//   );\r\n// }\r\n\r\n// const styles = StyleSheet.create({\r\n//   button: {\r\n//     width: '100%',\r\n//     height: 50,\r\n//     flexDirection: 'row',\r\n//     alignItems: 'center',\r\n//     // backgroundColor: '#efefef',\r\n//     height: 50,\r\n//     width: '90%',\r\n//     paddingHorizontal: 10,\r\n//     zIndex: 1,\r\n//     alignSelf: 'center',\r\n\r\n//   },\r\n//   buttonText: {\r\n//     flex: 1,\r\n//     textAlign: 'center',\r\n//     fontSize: 16,\r\n//     fontWeight: 'bold',\r\n//     color: '#808e9b',\r\n\r\n//   },\r\n//   dropdown: {\r\n//     // flex:1,\r\n\r\n//     height: 50,\r\n//     top: 50,\r\n//     backgroundColor: '#333',\r\n//     zIndex: 2,\r\n//     borderWidth:1,\r\n//     borderColor:'#fff',\r\n//     // width: '60%',\r\n//     // marginVertical: '20%',\r\n//     // paddingHorizontal: 10\r\n\r\n\r\n//   },\r\n//   dropdownText: {\r\n//     flex: 1,\r\n//     textAlign: 'center',\r\n//     fontSize: 16,\r\n//     fontWeight: 'bold',\r\n//     color: '#808e9b',\r\n//   },\r\n\r\n// });\r\n\r\n// export default Dropdown;\r\n\r\n// ===========================================================================\r\n\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport { Picker, View, Text, StyleSheet } from \"react-native\";\r\n\r\nexport default function Dropdown(props) {\r\n\r\n  const [selectedcat, setSelectedcat] = useState(props.label);\r\n  const [category, setcategory] = useState([{\r\n     id:'',\r\n     name:props.label\r\n   },...props.data]);\r\n\r\n\r\n\r\n  const onValueChangeCat =(value) => {\r\n    setcategory(val =>\r\n      {\r\n         val.filter(x=>x.id != '');\r\n      })\r\n    if(value ===''){\r\n      console.log(\"null\");\r\n    }\r\n    else{\r\n      props.onValueChange(value)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <View style={[props.style, styles.viewStyle]}>\r\n      <View style={{ flex: 1, fontSize: 14, }}>\r\n        <Picker\r\n          itemStyle={styles.itemStyle}\r\n          mode=\"dropdown\"\r\n          style={styles.pickerStyle}\r\n          selectedValue={selectedcat}\r\n          onValueChange={onValueChangeCat.bind(this)}\r\n        >\r\n          \r\n          {category.map((item, index) => (\r\n            <Picker.Item key={index + 1}\r\n              color=\"#808e9b\"\r\n\r\n              label={item.name}\r\n              value={item.id}\r\n              index={index + 1}\r\n            />\r\n          ))}\r\n        </Picker>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  viewStyle: {\r\n    // flex: 1,\r\n    alignSelf: \"center\",\r\n    flexDirection: \"row\",\r\n    width: \"92%\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\"\r\n  },\r\n  itemStyle: {\r\n    flex: 1,\r\n    fontSize: 10,\r\n    fontFamily: \"Roboto-Regular\",\r\n    color: \"#808e9b\",\r\n    backgroundColor: '#333'\r\n  },\r\n  pickerStyle: {\r\n    width: \"100%\",\r\n    height: 40,\r\n    color: \"#808e9b\",\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n    backgroundColor: '#333',\r\n    fontFamily: \"Roboto-Regular\"\r\n  },\r\n  textStyle: {\r\n    fontSize: 14,\r\n    fontFamily: \"Roboto-Regular\"\r\n  }\r\n});"]},"metadata":{},"sourceType":"module"}