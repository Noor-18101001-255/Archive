{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { FC, useState, useCallback } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { Icon } from 'react-native-elements';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Dropdown = function Dropdown(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      visible = _useState2[0],\n      setVisible = _useState2[1];\n\n  var _useState3 = useState(props.label),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selItem = _useState4[0],\n      setItem = _useState4[1];\n\n  var toggleDropdown = function toggleDropdown() {\n    setVisible(!visible);\n  };\n\n  var renderItem = function renderItem(_ref) {\n    var item = _ref.item;\n    return _jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        set;\n      },\n      style: styles.dropdown,\n      children: _jsx(Text, {\n        style: styles.dropdownText,\n        children: item\n      })\n    });\n  };\n\n  var renderDropdown = function renderDropdown() {\n    if (visible) {\n      return _jsx(FlatList, {\n        data: props.data,\n        keyExtractor: function keyExtractor(item, index) {\n          return index;\n        },\n        renderItem: renderItem\n      });\n    }\n  };\n\n  return _jsxs(TouchableOpacity, {\n    style: [props.style, styles.button],\n    onPress: toggleDropdown,\n    children: [renderDropdown(), _jsx(Text, {\n      style: styles.buttonText,\n      children: selItem\n    }), _jsx(Icon, {\n      type: \"font-awesome\",\n      name: \"chevron-down\"\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  button: {\n    width: '100%',\n    height: 50,\n    flexDirection: 'row',\n    alignItems: 'center',\n    height: 50,\n    width: '90%',\n    paddingHorizontal: 10,\n    zIndex: 1,\n    alignSelf: 'center'\n  },\n  buttonText: {\n    flex: 1,\n    textAlign: 'center',\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#808e9b'\n  },\n  dropdown: {\n    width: '100%',\n    height: 60,\n    top: 50,\n    backgroundColor: '#333'\n  },\n  dropdownText: {\n    flex: 1,\n    textAlign: 'center',\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#808e9b'\n  }\n});\nexport default Dropdown;","map":{"version":3,"sources":["D:/FYP/FYPNativeStuff/App/Archive/Components/Dropdown.js"],"names":["React","FC","useState","useCallback","Icon","Dropdown","props","visible","setVisible","label","selItem","setItem","toggleDropdown","renderItem","item","set","styles","dropdown","dropdownText","renderDropdown","data","index","style","button","buttonText","StyleSheet","create","width","height","flexDirection","alignItems","paddingHorizontal","zIndex","alignSelf","flex","textAlign","fontSize","fontWeight","color","top","backgroundColor"],"mappings":"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","sourcesContent":["import React, { FC, useState,useCallback } from 'react';\r\nimport { StyleSheet, View, Text, TouchableOpacity, FlatList } from 'react-native';\r\nimport { Icon } from 'react-native-elements';\r\n\r\n\r\nconst Dropdown = (props) => {\r\n  const [visible, setVisible] = useState(false);\r\n  const [selItem, setItem] = useState(props.label);\r\n  \r\n   \r\n\r\n  const toggleDropdown = () => {\r\n    setVisible(!visible);\r\n  };\r\n  const renderItem = ({ item }) => (\r\n    <TouchableOpacity\r\n      onPress={() => {set}}\r\n      style={styles.dropdown}\r\n    >\r\n      <Text style={styles.dropdownText}>\r\n        {item}\r\n      </Text>\r\n    </TouchableOpacity>\r\n\r\n  );\r\n  const renderDropdown = () => {\r\n    if (visible) {\r\n      return (\r\n        <FlatList\r\n          data={props.data}\r\n          keyExtractor={(item, index) => index}\r\n          renderItem={renderItem}\r\n        />\r\n\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <TouchableOpacity\r\n      style={[props.style, styles.button]}\r\n      onPress={toggleDropdown}\r\n    >\r\n      {renderDropdown()}\r\n      <Text style={styles.buttonText}>{selItem}</Text>\r\n      <Icon type='font-awesome' name='chevron-down' />\r\n    </TouchableOpacity>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  button: {\r\n    width: '100%',\r\n    height: 50,\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    // backgroundColor: '#efefef',\r\n    height: 50,\r\n    width: '90%',\r\n    paddingHorizontal: 10,\r\n    zIndex: 1,\r\n    alignSelf: 'center',\r\n\r\n  },\r\n  buttonText: {\r\n    flex: 1,\r\n    textAlign: 'center',\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n    color: '#808e9b',\r\n\r\n  },\r\n  dropdown: {\r\n    width: '100%',\r\n    height: 60,\r\n    top: 50,\r\n    backgroundColor: '#333',\r\n    // width: '60%',\r\n    // marginVertical: '20%',\r\n    // paddingHorizontal: 10\r\n\r\n\r\n  },\r\n  dropdownText: {\r\n    flex: 1,\r\n    textAlign: 'center',\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n    color: '#808e9b',\r\n  },\r\n\r\n});\r\n\r\nexport default Dropdown;"]},"metadata":{},"sourceType":"module"}